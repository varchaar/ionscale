// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ionscale/v1/ionscale.proto

package ionscalev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jsiebens/ionscale/pkg/gen/ionscale/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IonscaleServiceName is the fully-qualified name of the IonscaleService service.
	IonscaleServiceName = "ionscale.v1.IonscaleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IonscaleServiceGetVersionProcedure is the fully-qualified name of the IonscaleService's
	// GetVersion RPC.
	IonscaleServiceGetVersionProcedure = "/ionscale.v1.IonscaleService/GetVersion"
	// IonscaleServiceAuthenticateProcedure is the fully-qualified name of the IonscaleService's
	// Authenticate RPC.
	IonscaleServiceAuthenticateProcedure = "/ionscale.v1.IonscaleService/Authenticate"
	// IonscaleServiceGetDefaultDERPMapProcedure is the fully-qualified name of the IonscaleService's
	// GetDefaultDERPMap RPC.
	IonscaleServiceGetDefaultDERPMapProcedure = "/ionscale.v1.IonscaleService/GetDefaultDERPMap"
	// IonscaleServiceCreateTailnetProcedure is the fully-qualified name of the IonscaleService's
	// CreateTailnet RPC.
	IonscaleServiceCreateTailnetProcedure = "/ionscale.v1.IonscaleService/CreateTailnet"
	// IonscaleServiceUpdateTailnetProcedure is the fully-qualified name of the IonscaleService's
	// UpdateTailnet RPC.
	IonscaleServiceUpdateTailnetProcedure = "/ionscale.v1.IonscaleService/UpdateTailnet"
	// IonscaleServiceGetTailnetProcedure is the fully-qualified name of the IonscaleService's
	// GetTailnet RPC.
	IonscaleServiceGetTailnetProcedure = "/ionscale.v1.IonscaleService/GetTailnet"
	// IonscaleServiceListTailnetsProcedure is the fully-qualified name of the IonscaleService's
	// ListTailnets RPC.
	IonscaleServiceListTailnetsProcedure = "/ionscale.v1.IonscaleService/ListTailnets"
	// IonscaleServiceDeleteTailnetProcedure is the fully-qualified name of the IonscaleService's
	// DeleteTailnet RPC.
	IonscaleServiceDeleteTailnetProcedure = "/ionscale.v1.IonscaleService/DeleteTailnet"
	// IonscaleServiceGetDERPMapProcedure is the fully-qualified name of the IonscaleService's
	// GetDERPMap RPC.
	IonscaleServiceGetDERPMapProcedure = "/ionscale.v1.IonscaleService/GetDERPMap"
	// IonscaleServiceSetDERPMapProcedure is the fully-qualified name of the IonscaleService's
	// SetDERPMap RPC.
	IonscaleServiceSetDERPMapProcedure = "/ionscale.v1.IonscaleService/SetDERPMap"
	// IonscaleServiceResetDERPMapProcedure is the fully-qualified name of the IonscaleService's
	// ResetDERPMap RPC.
	IonscaleServiceResetDERPMapProcedure = "/ionscale.v1.IonscaleService/ResetDERPMap"
	// IonscaleServiceEnableFileSharingProcedure is the fully-qualified name of the IonscaleService's
	// EnableFileSharing RPC.
	IonscaleServiceEnableFileSharingProcedure = "/ionscale.v1.IonscaleService/EnableFileSharing"
	// IonscaleServiceDisableFileSharingProcedure is the fully-qualified name of the IonscaleService's
	// DisableFileSharing RPC.
	IonscaleServiceDisableFileSharingProcedure = "/ionscale.v1.IonscaleService/DisableFileSharing"
	// IonscaleServiceEnableServiceCollectionProcedure is the fully-qualified name of the
	// IonscaleService's EnableServiceCollection RPC.
	IonscaleServiceEnableServiceCollectionProcedure = "/ionscale.v1.IonscaleService/EnableServiceCollection"
	// IonscaleServiceDisableServiceCollectionProcedure is the fully-qualified name of the
	// IonscaleService's DisableServiceCollection RPC.
	IonscaleServiceDisableServiceCollectionProcedure = "/ionscale.v1.IonscaleService/DisableServiceCollection"
	// IonscaleServiceEnableSSHProcedure is the fully-qualified name of the IonscaleService's EnableSSH
	// RPC.
	IonscaleServiceEnableSSHProcedure = "/ionscale.v1.IonscaleService/EnableSSH"
	// IonscaleServiceDisableSSHProcedure is the fully-qualified name of the IonscaleService's
	// DisableSSH RPC.
	IonscaleServiceDisableSSHProcedure = "/ionscale.v1.IonscaleService/DisableSSH"
	// IonscaleServiceEnableMachineAuthorizationProcedure is the fully-qualified name of the
	// IonscaleService's EnableMachineAuthorization RPC.
	IonscaleServiceEnableMachineAuthorizationProcedure = "/ionscale.v1.IonscaleService/EnableMachineAuthorization"
	// IonscaleServiceDisableMachineAuthorizationProcedure is the fully-qualified name of the
	// IonscaleService's DisableMachineAuthorization RPC.
	IonscaleServiceDisableMachineAuthorizationProcedure = "/ionscale.v1.IonscaleService/DisableMachineAuthorization"
	// IonscaleServiceGetDNSConfigProcedure is the fully-qualified name of the IonscaleService's
	// GetDNSConfig RPC.
	IonscaleServiceGetDNSConfigProcedure = "/ionscale.v1.IonscaleService/GetDNSConfig"
	// IonscaleServiceSetDNSConfigProcedure is the fully-qualified name of the IonscaleService's
	// SetDNSConfig RPC.
	IonscaleServiceSetDNSConfigProcedure = "/ionscale.v1.IonscaleService/SetDNSConfig"
	// IonscaleServiceGetIAMPolicyProcedure is the fully-qualified name of the IonscaleService's
	// GetIAMPolicy RPC.
	IonscaleServiceGetIAMPolicyProcedure = "/ionscale.v1.IonscaleService/GetIAMPolicy"
	// IonscaleServiceSetIAMPolicyProcedure is the fully-qualified name of the IonscaleService's
	// SetIAMPolicy RPC.
	IonscaleServiceSetIAMPolicyProcedure = "/ionscale.v1.IonscaleService/SetIAMPolicy"
	// IonscaleServiceGetACLPolicyProcedure is the fully-qualified name of the IonscaleService's
	// GetACLPolicy RPC.
	IonscaleServiceGetACLPolicyProcedure = "/ionscale.v1.IonscaleService/GetACLPolicy"
	// IonscaleServiceSetACLPolicyProcedure is the fully-qualified name of the IonscaleService's
	// SetACLPolicy RPC.
	IonscaleServiceSetACLPolicyProcedure = "/ionscale.v1.IonscaleService/SetACLPolicy"
	// IonscaleServiceGetAuthKeyProcedure is the fully-qualified name of the IonscaleService's
	// GetAuthKey RPC.
	IonscaleServiceGetAuthKeyProcedure = "/ionscale.v1.IonscaleService/GetAuthKey"
	// IonscaleServiceCreateAuthKeyProcedure is the fully-qualified name of the IonscaleService's
	// CreateAuthKey RPC.
	IonscaleServiceCreateAuthKeyProcedure = "/ionscale.v1.IonscaleService/CreateAuthKey"
	// IonscaleServiceDeleteAuthKeyProcedure is the fully-qualified name of the IonscaleService's
	// DeleteAuthKey RPC.
	IonscaleServiceDeleteAuthKeyProcedure = "/ionscale.v1.IonscaleService/DeleteAuthKey"
	// IonscaleServiceListAuthKeysProcedure is the fully-qualified name of the IonscaleService's
	// ListAuthKeys RPC.
	IonscaleServiceListAuthKeysProcedure = "/ionscale.v1.IonscaleService/ListAuthKeys"
	// IonscaleServiceListUsersProcedure is the fully-qualified name of the IonscaleService's ListUsers
	// RPC.
	IonscaleServiceListUsersProcedure = "/ionscale.v1.IonscaleService/ListUsers"
	// IonscaleServiceDeleteUserProcedure is the fully-qualified name of the IonscaleService's
	// DeleteUser RPC.
	IonscaleServiceDeleteUserProcedure = "/ionscale.v1.IonscaleService/DeleteUser"
	// IonscaleServiceGetMachineProcedure is the fully-qualified name of the IonscaleService's
	// GetMachine RPC.
	IonscaleServiceGetMachineProcedure = "/ionscale.v1.IonscaleService/GetMachine"
	// IonscaleServiceListMachinesProcedure is the fully-qualified name of the IonscaleService's
	// ListMachines RPC.
	IonscaleServiceListMachinesProcedure = "/ionscale.v1.IonscaleService/ListMachines"
	// IonscaleServiceAuthorizeMachineProcedure is the fully-qualified name of the IonscaleService's
	// AuthorizeMachine RPC.
	IonscaleServiceAuthorizeMachineProcedure = "/ionscale.v1.IonscaleService/AuthorizeMachine"
	// IonscaleServiceRenameMachineProcedure is the fully-qualified name of the IonscaleService's
	// RenameMachine RPC.
	IonscaleServiceRenameMachineProcedure = "/ionscale.v1.IonscaleService/RenameMachine"
	// IonscaleServiceExpireMachineProcedure is the fully-qualified name of the IonscaleService's
	// ExpireMachine RPC.
	IonscaleServiceExpireMachineProcedure = "/ionscale.v1.IonscaleService/ExpireMachine"
	// IonscaleServiceDeleteMachineProcedure is the fully-qualified name of the IonscaleService's
	// DeleteMachine RPC.
	IonscaleServiceDeleteMachineProcedure = "/ionscale.v1.IonscaleService/DeleteMachine"
	// IonscaleServiceSetMachineKeyExpiryProcedure is the fully-qualified name of the IonscaleService's
	// SetMachineKeyExpiry RPC.
	IonscaleServiceSetMachineKeyExpiryProcedure = "/ionscale.v1.IonscaleService/SetMachineKeyExpiry"
	// IonscaleServiceGetMachineRoutesProcedure is the fully-qualified name of the IonscaleService's
	// GetMachineRoutes RPC.
	IonscaleServiceGetMachineRoutesProcedure = "/ionscale.v1.IonscaleService/GetMachineRoutes"
	// IonscaleServiceEnableMachineRoutesProcedure is the fully-qualified name of the IonscaleService's
	// EnableMachineRoutes RPC.
	IonscaleServiceEnableMachineRoutesProcedure = "/ionscale.v1.IonscaleService/EnableMachineRoutes"
	// IonscaleServiceDisableMachineRoutesProcedure is the fully-qualified name of the IonscaleService's
	// DisableMachineRoutes RPC.
	IonscaleServiceDisableMachineRoutesProcedure = "/ionscale.v1.IonscaleService/DisableMachineRoutes"
	// IonscaleServiceEnableExitNodeProcedure is the fully-qualified name of the IonscaleService's
	// EnableExitNode RPC.
	IonscaleServiceEnableExitNodeProcedure = "/ionscale.v1.IonscaleService/EnableExitNode"
	// IonscaleServiceDisableExitNodeProcedure is the fully-qualified name of the IonscaleService's
	// DisableExitNode RPC.
	IonscaleServiceDisableExitNodeProcedure = "/ionscale.v1.IonscaleService/DisableExitNode"
	// IonscaleServiceToggleAutoNameMachineProcedure is the fully-qualified name of the
	// IonscaleService's ToggleAutoNameMachine RPC.
	IonscaleServiceToggleAutoNameMachineProcedure = "/ionscale.v1.IonscaleService/ToggleAutoNameMachine"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ionscaleServiceServiceDescriptor                           = v1.File_ionscale_v1_ionscale_proto.Services().ByName("IonscaleService")
	ionscaleServiceGetVersionMethodDescriptor                  = ionscaleServiceServiceDescriptor.Methods().ByName("GetVersion")
	ionscaleServiceAuthenticateMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("Authenticate")
	ionscaleServiceGetDefaultDERPMapMethodDescriptor           = ionscaleServiceServiceDescriptor.Methods().ByName("GetDefaultDERPMap")
	ionscaleServiceCreateTailnetMethodDescriptor               = ionscaleServiceServiceDescriptor.Methods().ByName("CreateTailnet")
	ionscaleServiceUpdateTailnetMethodDescriptor               = ionscaleServiceServiceDescriptor.Methods().ByName("UpdateTailnet")
	ionscaleServiceGetTailnetMethodDescriptor                  = ionscaleServiceServiceDescriptor.Methods().ByName("GetTailnet")
	ionscaleServiceListTailnetsMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("ListTailnets")
	ionscaleServiceDeleteTailnetMethodDescriptor               = ionscaleServiceServiceDescriptor.Methods().ByName("DeleteTailnet")
	ionscaleServiceGetDERPMapMethodDescriptor                  = ionscaleServiceServiceDescriptor.Methods().ByName("GetDERPMap")
	ionscaleServiceSetDERPMapMethodDescriptor                  = ionscaleServiceServiceDescriptor.Methods().ByName("SetDERPMap")
	ionscaleServiceResetDERPMapMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("ResetDERPMap")
	ionscaleServiceEnableFileSharingMethodDescriptor           = ionscaleServiceServiceDescriptor.Methods().ByName("EnableFileSharing")
	ionscaleServiceDisableFileSharingMethodDescriptor          = ionscaleServiceServiceDescriptor.Methods().ByName("DisableFileSharing")
	ionscaleServiceEnableServiceCollectionMethodDescriptor     = ionscaleServiceServiceDescriptor.Methods().ByName("EnableServiceCollection")
	ionscaleServiceDisableServiceCollectionMethodDescriptor    = ionscaleServiceServiceDescriptor.Methods().ByName("DisableServiceCollection")
	ionscaleServiceEnableSSHMethodDescriptor                   = ionscaleServiceServiceDescriptor.Methods().ByName("EnableSSH")
	ionscaleServiceDisableSSHMethodDescriptor                  = ionscaleServiceServiceDescriptor.Methods().ByName("DisableSSH")
	ionscaleServiceEnableMachineAuthorizationMethodDescriptor  = ionscaleServiceServiceDescriptor.Methods().ByName("EnableMachineAuthorization")
	ionscaleServiceDisableMachineAuthorizationMethodDescriptor = ionscaleServiceServiceDescriptor.Methods().ByName("DisableMachineAuthorization")
	ionscaleServiceGetDNSConfigMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("GetDNSConfig")
	ionscaleServiceSetDNSConfigMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("SetDNSConfig")
	ionscaleServiceGetIAMPolicyMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("GetIAMPolicy")
	ionscaleServiceSetIAMPolicyMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("SetIAMPolicy")
	ionscaleServiceGetACLPolicyMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("GetACLPolicy")
	ionscaleServiceSetACLPolicyMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("SetACLPolicy")
	ionscaleServiceGetAuthKeyMethodDescriptor                  = ionscaleServiceServiceDescriptor.Methods().ByName("GetAuthKey")
	ionscaleServiceCreateAuthKeyMethodDescriptor               = ionscaleServiceServiceDescriptor.Methods().ByName("CreateAuthKey")
	ionscaleServiceDeleteAuthKeyMethodDescriptor               = ionscaleServiceServiceDescriptor.Methods().ByName("DeleteAuthKey")
	ionscaleServiceListAuthKeysMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("ListAuthKeys")
	ionscaleServiceListUsersMethodDescriptor                   = ionscaleServiceServiceDescriptor.Methods().ByName("ListUsers")
	ionscaleServiceDeleteUserMethodDescriptor                  = ionscaleServiceServiceDescriptor.Methods().ByName("DeleteUser")
	ionscaleServiceGetMachineMethodDescriptor                  = ionscaleServiceServiceDescriptor.Methods().ByName("GetMachine")
	ionscaleServiceListMachinesMethodDescriptor                = ionscaleServiceServiceDescriptor.Methods().ByName("ListMachines")
	ionscaleServiceAuthorizeMachineMethodDescriptor            = ionscaleServiceServiceDescriptor.Methods().ByName("AuthorizeMachine")
	ionscaleServiceRenameMachineMethodDescriptor               = ionscaleServiceServiceDescriptor.Methods().ByName("RenameMachine")
	ionscaleServiceExpireMachineMethodDescriptor               = ionscaleServiceServiceDescriptor.Methods().ByName("ExpireMachine")
	ionscaleServiceDeleteMachineMethodDescriptor               = ionscaleServiceServiceDescriptor.Methods().ByName("DeleteMachine")
	ionscaleServiceSetMachineKeyExpiryMethodDescriptor         = ionscaleServiceServiceDescriptor.Methods().ByName("SetMachineKeyExpiry")
	ionscaleServiceGetMachineRoutesMethodDescriptor            = ionscaleServiceServiceDescriptor.Methods().ByName("GetMachineRoutes")
	ionscaleServiceEnableMachineRoutesMethodDescriptor         = ionscaleServiceServiceDescriptor.Methods().ByName("EnableMachineRoutes")
	ionscaleServiceDisableMachineRoutesMethodDescriptor        = ionscaleServiceServiceDescriptor.Methods().ByName("DisableMachineRoutes")
	ionscaleServiceEnableExitNodeMethodDescriptor              = ionscaleServiceServiceDescriptor.Methods().ByName("EnableExitNode")
	ionscaleServiceDisableExitNodeMethodDescriptor             = ionscaleServiceServiceDescriptor.Methods().ByName("DisableExitNode")
	ionscaleServiceToggleAutoNameMachineMethodDescriptor       = ionscaleServiceServiceDescriptor.Methods().ByName("ToggleAutoNameMachine")
)

// IonscaleServiceClient is a client for the ionscale.v1.IonscaleService service.
type IonscaleServiceClient interface {
	GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error)
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.ServerStreamForClient[v1.AuthenticateResponse], error)
	GetDefaultDERPMap(context.Context, *connect.Request[v1.GetDefaultDERPMapRequest]) (*connect.Response[v1.GetDefaultDERPMapResponse], error)
	CreateTailnet(context.Context, *connect.Request[v1.CreateTailnetRequest]) (*connect.Response[v1.CreateTailnetResponse], error)
	UpdateTailnet(context.Context, *connect.Request[v1.UpdateTailnetRequest]) (*connect.Response[v1.UpdateTailnetResponse], error)
	GetTailnet(context.Context, *connect.Request[v1.GetTailnetRequest]) (*connect.Response[v1.GetTailnetResponse], error)
	ListTailnets(context.Context, *connect.Request[v1.ListTailnetsRequest]) (*connect.Response[v1.ListTailnetsResponse], error)
	DeleteTailnet(context.Context, *connect.Request[v1.DeleteTailnetRequest]) (*connect.Response[v1.DeleteTailnetResponse], error)
	GetDERPMap(context.Context, *connect.Request[v1.GetDERPMapRequest]) (*connect.Response[v1.GetDERPMapResponse], error)
	SetDERPMap(context.Context, *connect.Request[v1.SetDERPMapRequest]) (*connect.Response[v1.SetDERPMapResponse], error)
	ResetDERPMap(context.Context, *connect.Request[v1.ResetDERPMapRequest]) (*connect.Response[v1.ResetDERPMapResponse], error)
	EnableFileSharing(context.Context, *connect.Request[v1.EnableFileSharingRequest]) (*connect.Response[v1.EnableFileSharingResponse], error)
	DisableFileSharing(context.Context, *connect.Request[v1.DisableFileSharingRequest]) (*connect.Response[v1.DisableFileSharingResponse], error)
	EnableServiceCollection(context.Context, *connect.Request[v1.EnableServiceCollectionRequest]) (*connect.Response[v1.EnableServiceCollectionResponse], error)
	DisableServiceCollection(context.Context, *connect.Request[v1.DisableServiceCollectionRequest]) (*connect.Response[v1.DisableServiceCollectionResponse], error)
	EnableSSH(context.Context, *connect.Request[v1.EnableSSHRequest]) (*connect.Response[v1.EnableSSHResponse], error)
	DisableSSH(context.Context, *connect.Request[v1.DisableSSHRequest]) (*connect.Response[v1.DisableSSHResponse], error)
	EnableMachineAuthorization(context.Context, *connect.Request[v1.EnableMachineAuthorizationRequest]) (*connect.Response[v1.EnableMachineAuthorizationResponse], error)
	DisableMachineAuthorization(context.Context, *connect.Request[v1.DisableMachineAuthorizationRequest]) (*connect.Response[v1.DisableMachineAuthorizationResponse], error)
	GetDNSConfig(context.Context, *connect.Request[v1.GetDNSConfigRequest]) (*connect.Response[v1.GetDNSConfigResponse], error)
	SetDNSConfig(context.Context, *connect.Request[v1.SetDNSConfigRequest]) (*connect.Response[v1.SetDNSConfigResponse], error)
	GetIAMPolicy(context.Context, *connect.Request[v1.GetIAMPolicyRequest]) (*connect.Response[v1.GetIAMPolicyResponse], error)
	SetIAMPolicy(context.Context, *connect.Request[v1.SetIAMPolicyRequest]) (*connect.Response[v1.SetIAMPolicyResponse], error)
	GetACLPolicy(context.Context, *connect.Request[v1.GetACLPolicyRequest]) (*connect.Response[v1.GetACLPolicyResponse], error)
	SetACLPolicy(context.Context, *connect.Request[v1.SetACLPolicyRequest]) (*connect.Response[v1.SetACLPolicyResponse], error)
	GetAuthKey(context.Context, *connect.Request[v1.GetAuthKeyRequest]) (*connect.Response[v1.GetAuthKeyResponse], error)
	CreateAuthKey(context.Context, *connect.Request[v1.CreateAuthKeyRequest]) (*connect.Response[v1.CreateAuthKeyResponse], error)
	DeleteAuthKey(context.Context, *connect.Request[v1.DeleteAuthKeyRequest]) (*connect.Response[v1.DeleteAuthKeyResponse], error)
	ListAuthKeys(context.Context, *connect.Request[v1.ListAuthKeysRequest]) (*connect.Response[v1.ListAuthKeysResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	GetMachine(context.Context, *connect.Request[v1.GetMachineRequest]) (*connect.Response[v1.GetMachineResponse], error)
	ListMachines(context.Context, *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error)
	AuthorizeMachine(context.Context, *connect.Request[v1.AuthorizeMachineRequest]) (*connect.Response[v1.AuthorizeMachineResponse], error)
	RenameMachine(context.Context, *connect.Request[v1.RenameMachineRequest]) (*connect.Response[v1.RenameMachineResponse], error)
	ExpireMachine(context.Context, *connect.Request[v1.ExpireMachineRequest]) (*connect.Response[v1.ExpireMachineResponse], error)
	DeleteMachine(context.Context, *connect.Request[v1.DeleteMachineRequest]) (*connect.Response[v1.DeleteMachineResponse], error)
	SetMachineKeyExpiry(context.Context, *connect.Request[v1.SetMachineKeyExpiryRequest]) (*connect.Response[v1.SetMachineKeyExpiryResponse], error)
	GetMachineRoutes(context.Context, *connect.Request[v1.GetMachineRoutesRequest]) (*connect.Response[v1.GetMachineRoutesResponse], error)
	EnableMachineRoutes(context.Context, *connect.Request[v1.EnableMachineRoutesRequest]) (*connect.Response[v1.EnableMachineRoutesResponse], error)
	DisableMachineRoutes(context.Context, *connect.Request[v1.DisableMachineRoutesRequest]) (*connect.Response[v1.DisableMachineRoutesResponse], error)
	EnableExitNode(context.Context, *connect.Request[v1.EnableExitNodeRequest]) (*connect.Response[v1.EnableExitNodeResponse], error)
	DisableExitNode(context.Context, *connect.Request[v1.DisableExitNodeRequest]) (*connect.Response[v1.DisableExitNodeResponse], error)
	ToggleAutoNameMachine(context.Context, *connect.Request[v1.ToggleAutoNameMachineRequest]) (*connect.Response[v1.ToggleAutoNameMachineResponse], error)
}

// NewIonscaleServiceClient constructs a client for the ionscale.v1.IonscaleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIonscaleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IonscaleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ionscaleServiceClient{
		getVersion: connect.NewClient[v1.GetVersionRequest, v1.GetVersionResponse](
			httpClient,
			baseURL+IonscaleServiceGetVersionProcedure,
			connect.WithSchema(ionscaleServiceGetVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authenticate: connect.NewClient[v1.AuthenticateRequest, v1.AuthenticateResponse](
			httpClient,
			baseURL+IonscaleServiceAuthenticateProcedure,
			connect.WithSchema(ionscaleServiceAuthenticateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDefaultDERPMap: connect.NewClient[v1.GetDefaultDERPMapRequest, v1.GetDefaultDERPMapResponse](
			httpClient,
			baseURL+IonscaleServiceGetDefaultDERPMapProcedure,
			connect.WithSchema(ionscaleServiceGetDefaultDERPMapMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTailnet: connect.NewClient[v1.CreateTailnetRequest, v1.CreateTailnetResponse](
			httpClient,
			baseURL+IonscaleServiceCreateTailnetProcedure,
			connect.WithSchema(ionscaleServiceCreateTailnetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTailnet: connect.NewClient[v1.UpdateTailnetRequest, v1.UpdateTailnetResponse](
			httpClient,
			baseURL+IonscaleServiceUpdateTailnetProcedure,
			connect.WithSchema(ionscaleServiceUpdateTailnetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTailnet: connect.NewClient[v1.GetTailnetRequest, v1.GetTailnetResponse](
			httpClient,
			baseURL+IonscaleServiceGetTailnetProcedure,
			connect.WithSchema(ionscaleServiceGetTailnetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTailnets: connect.NewClient[v1.ListTailnetsRequest, v1.ListTailnetsResponse](
			httpClient,
			baseURL+IonscaleServiceListTailnetsProcedure,
			connect.WithSchema(ionscaleServiceListTailnetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTailnet: connect.NewClient[v1.DeleteTailnetRequest, v1.DeleteTailnetResponse](
			httpClient,
			baseURL+IonscaleServiceDeleteTailnetProcedure,
			connect.WithSchema(ionscaleServiceDeleteTailnetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDERPMap: connect.NewClient[v1.GetDERPMapRequest, v1.GetDERPMapResponse](
			httpClient,
			baseURL+IonscaleServiceGetDERPMapProcedure,
			connect.WithSchema(ionscaleServiceGetDERPMapMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setDERPMap: connect.NewClient[v1.SetDERPMapRequest, v1.SetDERPMapResponse](
			httpClient,
			baseURL+IonscaleServiceSetDERPMapProcedure,
			connect.WithSchema(ionscaleServiceSetDERPMapMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resetDERPMap: connect.NewClient[v1.ResetDERPMapRequest, v1.ResetDERPMapResponse](
			httpClient,
			baseURL+IonscaleServiceResetDERPMapProcedure,
			connect.WithSchema(ionscaleServiceResetDERPMapMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableFileSharing: connect.NewClient[v1.EnableFileSharingRequest, v1.EnableFileSharingResponse](
			httpClient,
			baseURL+IonscaleServiceEnableFileSharingProcedure,
			connect.WithSchema(ionscaleServiceEnableFileSharingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disableFileSharing: connect.NewClient[v1.DisableFileSharingRequest, v1.DisableFileSharingResponse](
			httpClient,
			baseURL+IonscaleServiceDisableFileSharingProcedure,
			connect.WithSchema(ionscaleServiceDisableFileSharingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableServiceCollection: connect.NewClient[v1.EnableServiceCollectionRequest, v1.EnableServiceCollectionResponse](
			httpClient,
			baseURL+IonscaleServiceEnableServiceCollectionProcedure,
			connect.WithSchema(ionscaleServiceEnableServiceCollectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disableServiceCollection: connect.NewClient[v1.DisableServiceCollectionRequest, v1.DisableServiceCollectionResponse](
			httpClient,
			baseURL+IonscaleServiceDisableServiceCollectionProcedure,
			connect.WithSchema(ionscaleServiceDisableServiceCollectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableSSH: connect.NewClient[v1.EnableSSHRequest, v1.EnableSSHResponse](
			httpClient,
			baseURL+IonscaleServiceEnableSSHProcedure,
			connect.WithSchema(ionscaleServiceEnableSSHMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disableSSH: connect.NewClient[v1.DisableSSHRequest, v1.DisableSSHResponse](
			httpClient,
			baseURL+IonscaleServiceDisableSSHProcedure,
			connect.WithSchema(ionscaleServiceDisableSSHMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableMachineAuthorization: connect.NewClient[v1.EnableMachineAuthorizationRequest, v1.EnableMachineAuthorizationResponse](
			httpClient,
			baseURL+IonscaleServiceEnableMachineAuthorizationProcedure,
			connect.WithSchema(ionscaleServiceEnableMachineAuthorizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disableMachineAuthorization: connect.NewClient[v1.DisableMachineAuthorizationRequest, v1.DisableMachineAuthorizationResponse](
			httpClient,
			baseURL+IonscaleServiceDisableMachineAuthorizationProcedure,
			connect.WithSchema(ionscaleServiceDisableMachineAuthorizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDNSConfig: connect.NewClient[v1.GetDNSConfigRequest, v1.GetDNSConfigResponse](
			httpClient,
			baseURL+IonscaleServiceGetDNSConfigProcedure,
			connect.WithSchema(ionscaleServiceGetDNSConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setDNSConfig: connect.NewClient[v1.SetDNSConfigRequest, v1.SetDNSConfigResponse](
			httpClient,
			baseURL+IonscaleServiceSetDNSConfigProcedure,
			connect.WithSchema(ionscaleServiceSetDNSConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getIAMPolicy: connect.NewClient[v1.GetIAMPolicyRequest, v1.GetIAMPolicyResponse](
			httpClient,
			baseURL+IonscaleServiceGetIAMPolicyProcedure,
			connect.WithSchema(ionscaleServiceGetIAMPolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setIAMPolicy: connect.NewClient[v1.SetIAMPolicyRequest, v1.SetIAMPolicyResponse](
			httpClient,
			baseURL+IonscaleServiceSetIAMPolicyProcedure,
			connect.WithSchema(ionscaleServiceSetIAMPolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getACLPolicy: connect.NewClient[v1.GetACLPolicyRequest, v1.GetACLPolicyResponse](
			httpClient,
			baseURL+IonscaleServiceGetACLPolicyProcedure,
			connect.WithSchema(ionscaleServiceGetACLPolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setACLPolicy: connect.NewClient[v1.SetACLPolicyRequest, v1.SetACLPolicyResponse](
			httpClient,
			baseURL+IonscaleServiceSetACLPolicyProcedure,
			connect.WithSchema(ionscaleServiceSetACLPolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAuthKey: connect.NewClient[v1.GetAuthKeyRequest, v1.GetAuthKeyResponse](
			httpClient,
			baseURL+IonscaleServiceGetAuthKeyProcedure,
			connect.WithSchema(ionscaleServiceGetAuthKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAuthKey: connect.NewClient[v1.CreateAuthKeyRequest, v1.CreateAuthKeyResponse](
			httpClient,
			baseURL+IonscaleServiceCreateAuthKeyProcedure,
			connect.WithSchema(ionscaleServiceCreateAuthKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAuthKey: connect.NewClient[v1.DeleteAuthKeyRequest, v1.DeleteAuthKeyResponse](
			httpClient,
			baseURL+IonscaleServiceDeleteAuthKeyProcedure,
			connect.WithSchema(ionscaleServiceDeleteAuthKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAuthKeys: connect.NewClient[v1.ListAuthKeysRequest, v1.ListAuthKeysResponse](
			httpClient,
			baseURL+IonscaleServiceListAuthKeysProcedure,
			connect.WithSchema(ionscaleServiceListAuthKeysMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+IonscaleServiceListUsersProcedure,
			connect.WithSchema(ionscaleServiceListUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+IonscaleServiceDeleteUserProcedure,
			connect.WithSchema(ionscaleServiceDeleteUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMachine: connect.NewClient[v1.GetMachineRequest, v1.GetMachineResponse](
			httpClient,
			baseURL+IonscaleServiceGetMachineProcedure,
			connect.WithSchema(ionscaleServiceGetMachineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMachines: connect.NewClient[v1.ListMachinesRequest, v1.ListMachinesResponse](
			httpClient,
			baseURL+IonscaleServiceListMachinesProcedure,
			connect.WithSchema(ionscaleServiceListMachinesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authorizeMachine: connect.NewClient[v1.AuthorizeMachineRequest, v1.AuthorizeMachineResponse](
			httpClient,
			baseURL+IonscaleServiceAuthorizeMachineProcedure,
			connect.WithSchema(ionscaleServiceAuthorizeMachineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		renameMachine: connect.NewClient[v1.RenameMachineRequest, v1.RenameMachineResponse](
			httpClient,
			baseURL+IonscaleServiceRenameMachineProcedure,
			connect.WithSchema(ionscaleServiceRenameMachineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		expireMachine: connect.NewClient[v1.ExpireMachineRequest, v1.ExpireMachineResponse](
			httpClient,
			baseURL+IonscaleServiceExpireMachineProcedure,
			connect.WithSchema(ionscaleServiceExpireMachineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteMachine: connect.NewClient[v1.DeleteMachineRequest, v1.DeleteMachineResponse](
			httpClient,
			baseURL+IonscaleServiceDeleteMachineProcedure,
			connect.WithSchema(ionscaleServiceDeleteMachineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setMachineKeyExpiry: connect.NewClient[v1.SetMachineKeyExpiryRequest, v1.SetMachineKeyExpiryResponse](
			httpClient,
			baseURL+IonscaleServiceSetMachineKeyExpiryProcedure,
			connect.WithSchema(ionscaleServiceSetMachineKeyExpiryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMachineRoutes: connect.NewClient[v1.GetMachineRoutesRequest, v1.GetMachineRoutesResponse](
			httpClient,
			baseURL+IonscaleServiceGetMachineRoutesProcedure,
			connect.WithSchema(ionscaleServiceGetMachineRoutesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableMachineRoutes: connect.NewClient[v1.EnableMachineRoutesRequest, v1.EnableMachineRoutesResponse](
			httpClient,
			baseURL+IonscaleServiceEnableMachineRoutesProcedure,
			connect.WithSchema(ionscaleServiceEnableMachineRoutesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disableMachineRoutes: connect.NewClient[v1.DisableMachineRoutesRequest, v1.DisableMachineRoutesResponse](
			httpClient,
			baseURL+IonscaleServiceDisableMachineRoutesProcedure,
			connect.WithSchema(ionscaleServiceDisableMachineRoutesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableExitNode: connect.NewClient[v1.EnableExitNodeRequest, v1.EnableExitNodeResponse](
			httpClient,
			baseURL+IonscaleServiceEnableExitNodeProcedure,
			connect.WithSchema(ionscaleServiceEnableExitNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disableExitNode: connect.NewClient[v1.DisableExitNodeRequest, v1.DisableExitNodeResponse](
			httpClient,
			baseURL+IonscaleServiceDisableExitNodeProcedure,
			connect.WithSchema(ionscaleServiceDisableExitNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		toggleAutoNameMachine: connect.NewClient[v1.ToggleAutoNameMachineRequest, v1.ToggleAutoNameMachineResponse](
			httpClient,
			baseURL+IonscaleServiceToggleAutoNameMachineProcedure,
			connect.WithSchema(ionscaleServiceToggleAutoNameMachineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ionscaleServiceClient implements IonscaleServiceClient.
type ionscaleServiceClient struct {
	getVersion                  *connect.Client[v1.GetVersionRequest, v1.GetVersionResponse]
	authenticate                *connect.Client[v1.AuthenticateRequest, v1.AuthenticateResponse]
	getDefaultDERPMap           *connect.Client[v1.GetDefaultDERPMapRequest, v1.GetDefaultDERPMapResponse]
	createTailnet               *connect.Client[v1.CreateTailnetRequest, v1.CreateTailnetResponse]
	updateTailnet               *connect.Client[v1.UpdateTailnetRequest, v1.UpdateTailnetResponse]
	getTailnet                  *connect.Client[v1.GetTailnetRequest, v1.GetTailnetResponse]
	listTailnets                *connect.Client[v1.ListTailnetsRequest, v1.ListTailnetsResponse]
	deleteTailnet               *connect.Client[v1.DeleteTailnetRequest, v1.DeleteTailnetResponse]
	getDERPMap                  *connect.Client[v1.GetDERPMapRequest, v1.GetDERPMapResponse]
	setDERPMap                  *connect.Client[v1.SetDERPMapRequest, v1.SetDERPMapResponse]
	resetDERPMap                *connect.Client[v1.ResetDERPMapRequest, v1.ResetDERPMapResponse]
	enableFileSharing           *connect.Client[v1.EnableFileSharingRequest, v1.EnableFileSharingResponse]
	disableFileSharing          *connect.Client[v1.DisableFileSharingRequest, v1.DisableFileSharingResponse]
	enableServiceCollection     *connect.Client[v1.EnableServiceCollectionRequest, v1.EnableServiceCollectionResponse]
	disableServiceCollection    *connect.Client[v1.DisableServiceCollectionRequest, v1.DisableServiceCollectionResponse]
	enableSSH                   *connect.Client[v1.EnableSSHRequest, v1.EnableSSHResponse]
	disableSSH                  *connect.Client[v1.DisableSSHRequest, v1.DisableSSHResponse]
	enableMachineAuthorization  *connect.Client[v1.EnableMachineAuthorizationRequest, v1.EnableMachineAuthorizationResponse]
	disableMachineAuthorization *connect.Client[v1.DisableMachineAuthorizationRequest, v1.DisableMachineAuthorizationResponse]
	getDNSConfig                *connect.Client[v1.GetDNSConfigRequest, v1.GetDNSConfigResponse]
	setDNSConfig                *connect.Client[v1.SetDNSConfigRequest, v1.SetDNSConfigResponse]
	getIAMPolicy                *connect.Client[v1.GetIAMPolicyRequest, v1.GetIAMPolicyResponse]
	setIAMPolicy                *connect.Client[v1.SetIAMPolicyRequest, v1.SetIAMPolicyResponse]
	getACLPolicy                *connect.Client[v1.GetACLPolicyRequest, v1.GetACLPolicyResponse]
	setACLPolicy                *connect.Client[v1.SetACLPolicyRequest, v1.SetACLPolicyResponse]
	getAuthKey                  *connect.Client[v1.GetAuthKeyRequest, v1.GetAuthKeyResponse]
	createAuthKey               *connect.Client[v1.CreateAuthKeyRequest, v1.CreateAuthKeyResponse]
	deleteAuthKey               *connect.Client[v1.DeleteAuthKeyRequest, v1.DeleteAuthKeyResponse]
	listAuthKeys                *connect.Client[v1.ListAuthKeysRequest, v1.ListAuthKeysResponse]
	listUsers                   *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	deleteUser                  *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	getMachine                  *connect.Client[v1.GetMachineRequest, v1.GetMachineResponse]
	listMachines                *connect.Client[v1.ListMachinesRequest, v1.ListMachinesResponse]
	authorizeMachine            *connect.Client[v1.AuthorizeMachineRequest, v1.AuthorizeMachineResponse]
	renameMachine               *connect.Client[v1.RenameMachineRequest, v1.RenameMachineResponse]
	expireMachine               *connect.Client[v1.ExpireMachineRequest, v1.ExpireMachineResponse]
	deleteMachine               *connect.Client[v1.DeleteMachineRequest, v1.DeleteMachineResponse]
	setMachineKeyExpiry         *connect.Client[v1.SetMachineKeyExpiryRequest, v1.SetMachineKeyExpiryResponse]
	getMachineRoutes            *connect.Client[v1.GetMachineRoutesRequest, v1.GetMachineRoutesResponse]
	enableMachineRoutes         *connect.Client[v1.EnableMachineRoutesRequest, v1.EnableMachineRoutesResponse]
	disableMachineRoutes        *connect.Client[v1.DisableMachineRoutesRequest, v1.DisableMachineRoutesResponse]
	enableExitNode              *connect.Client[v1.EnableExitNodeRequest, v1.EnableExitNodeResponse]
	disableExitNode             *connect.Client[v1.DisableExitNodeRequest, v1.DisableExitNodeResponse]
	toggleAutoNameMachine       *connect.Client[v1.ToggleAutoNameMachineRequest, v1.ToggleAutoNameMachineResponse]
}

// GetVersion calls ionscale.v1.IonscaleService.GetVersion.
func (c *ionscaleServiceClient) GetVersion(ctx context.Context, req *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// Authenticate calls ionscale.v1.IonscaleService.Authenticate.
func (c *ionscaleServiceClient) Authenticate(ctx context.Context, req *connect.Request[v1.AuthenticateRequest]) (*connect.ServerStreamForClient[v1.AuthenticateResponse], error) {
	return c.authenticate.CallServerStream(ctx, req)
}

// GetDefaultDERPMap calls ionscale.v1.IonscaleService.GetDefaultDERPMap.
func (c *ionscaleServiceClient) GetDefaultDERPMap(ctx context.Context, req *connect.Request[v1.GetDefaultDERPMapRequest]) (*connect.Response[v1.GetDefaultDERPMapResponse], error) {
	return c.getDefaultDERPMap.CallUnary(ctx, req)
}

// CreateTailnet calls ionscale.v1.IonscaleService.CreateTailnet.
func (c *ionscaleServiceClient) CreateTailnet(ctx context.Context, req *connect.Request[v1.CreateTailnetRequest]) (*connect.Response[v1.CreateTailnetResponse], error) {
	return c.createTailnet.CallUnary(ctx, req)
}

// UpdateTailnet calls ionscale.v1.IonscaleService.UpdateTailnet.
func (c *ionscaleServiceClient) UpdateTailnet(ctx context.Context, req *connect.Request[v1.UpdateTailnetRequest]) (*connect.Response[v1.UpdateTailnetResponse], error) {
	return c.updateTailnet.CallUnary(ctx, req)
}

// GetTailnet calls ionscale.v1.IonscaleService.GetTailnet.
func (c *ionscaleServiceClient) GetTailnet(ctx context.Context, req *connect.Request[v1.GetTailnetRequest]) (*connect.Response[v1.GetTailnetResponse], error) {
	return c.getTailnet.CallUnary(ctx, req)
}

// ListTailnets calls ionscale.v1.IonscaleService.ListTailnets.
func (c *ionscaleServiceClient) ListTailnets(ctx context.Context, req *connect.Request[v1.ListTailnetsRequest]) (*connect.Response[v1.ListTailnetsResponse], error) {
	return c.listTailnets.CallUnary(ctx, req)
}

// DeleteTailnet calls ionscale.v1.IonscaleService.DeleteTailnet.
func (c *ionscaleServiceClient) DeleteTailnet(ctx context.Context, req *connect.Request[v1.DeleteTailnetRequest]) (*connect.Response[v1.DeleteTailnetResponse], error) {
	return c.deleteTailnet.CallUnary(ctx, req)
}

// GetDERPMap calls ionscale.v1.IonscaleService.GetDERPMap.
func (c *ionscaleServiceClient) GetDERPMap(ctx context.Context, req *connect.Request[v1.GetDERPMapRequest]) (*connect.Response[v1.GetDERPMapResponse], error) {
	return c.getDERPMap.CallUnary(ctx, req)
}

// SetDERPMap calls ionscale.v1.IonscaleService.SetDERPMap.
func (c *ionscaleServiceClient) SetDERPMap(ctx context.Context, req *connect.Request[v1.SetDERPMapRequest]) (*connect.Response[v1.SetDERPMapResponse], error) {
	return c.setDERPMap.CallUnary(ctx, req)
}

// ResetDERPMap calls ionscale.v1.IonscaleService.ResetDERPMap.
func (c *ionscaleServiceClient) ResetDERPMap(ctx context.Context, req *connect.Request[v1.ResetDERPMapRequest]) (*connect.Response[v1.ResetDERPMapResponse], error) {
	return c.resetDERPMap.CallUnary(ctx, req)
}

// EnableFileSharing calls ionscale.v1.IonscaleService.EnableFileSharing.
func (c *ionscaleServiceClient) EnableFileSharing(ctx context.Context, req *connect.Request[v1.EnableFileSharingRequest]) (*connect.Response[v1.EnableFileSharingResponse], error) {
	return c.enableFileSharing.CallUnary(ctx, req)
}

// DisableFileSharing calls ionscale.v1.IonscaleService.DisableFileSharing.
func (c *ionscaleServiceClient) DisableFileSharing(ctx context.Context, req *connect.Request[v1.DisableFileSharingRequest]) (*connect.Response[v1.DisableFileSharingResponse], error) {
	return c.disableFileSharing.CallUnary(ctx, req)
}

// EnableServiceCollection calls ionscale.v1.IonscaleService.EnableServiceCollection.
func (c *ionscaleServiceClient) EnableServiceCollection(ctx context.Context, req *connect.Request[v1.EnableServiceCollectionRequest]) (*connect.Response[v1.EnableServiceCollectionResponse], error) {
	return c.enableServiceCollection.CallUnary(ctx, req)
}

// DisableServiceCollection calls ionscale.v1.IonscaleService.DisableServiceCollection.
func (c *ionscaleServiceClient) DisableServiceCollection(ctx context.Context, req *connect.Request[v1.DisableServiceCollectionRequest]) (*connect.Response[v1.DisableServiceCollectionResponse], error) {
	return c.disableServiceCollection.CallUnary(ctx, req)
}

// EnableSSH calls ionscale.v1.IonscaleService.EnableSSH.
func (c *ionscaleServiceClient) EnableSSH(ctx context.Context, req *connect.Request[v1.EnableSSHRequest]) (*connect.Response[v1.EnableSSHResponse], error) {
	return c.enableSSH.CallUnary(ctx, req)
}

// DisableSSH calls ionscale.v1.IonscaleService.DisableSSH.
func (c *ionscaleServiceClient) DisableSSH(ctx context.Context, req *connect.Request[v1.DisableSSHRequest]) (*connect.Response[v1.DisableSSHResponse], error) {
	return c.disableSSH.CallUnary(ctx, req)
}

// EnableMachineAuthorization calls ionscale.v1.IonscaleService.EnableMachineAuthorization.
func (c *ionscaleServiceClient) EnableMachineAuthorization(ctx context.Context, req *connect.Request[v1.EnableMachineAuthorizationRequest]) (*connect.Response[v1.EnableMachineAuthorizationResponse], error) {
	return c.enableMachineAuthorization.CallUnary(ctx, req)
}

// DisableMachineAuthorization calls ionscale.v1.IonscaleService.DisableMachineAuthorization.
func (c *ionscaleServiceClient) DisableMachineAuthorization(ctx context.Context, req *connect.Request[v1.DisableMachineAuthorizationRequest]) (*connect.Response[v1.DisableMachineAuthorizationResponse], error) {
	return c.disableMachineAuthorization.CallUnary(ctx, req)
}

// GetDNSConfig calls ionscale.v1.IonscaleService.GetDNSConfig.
func (c *ionscaleServiceClient) GetDNSConfig(ctx context.Context, req *connect.Request[v1.GetDNSConfigRequest]) (*connect.Response[v1.GetDNSConfigResponse], error) {
	return c.getDNSConfig.CallUnary(ctx, req)
}

// SetDNSConfig calls ionscale.v1.IonscaleService.SetDNSConfig.
func (c *ionscaleServiceClient) SetDNSConfig(ctx context.Context, req *connect.Request[v1.SetDNSConfigRequest]) (*connect.Response[v1.SetDNSConfigResponse], error) {
	return c.setDNSConfig.CallUnary(ctx, req)
}

// GetIAMPolicy calls ionscale.v1.IonscaleService.GetIAMPolicy.
func (c *ionscaleServiceClient) GetIAMPolicy(ctx context.Context, req *connect.Request[v1.GetIAMPolicyRequest]) (*connect.Response[v1.GetIAMPolicyResponse], error) {
	return c.getIAMPolicy.CallUnary(ctx, req)
}

// SetIAMPolicy calls ionscale.v1.IonscaleService.SetIAMPolicy.
func (c *ionscaleServiceClient) SetIAMPolicy(ctx context.Context, req *connect.Request[v1.SetIAMPolicyRequest]) (*connect.Response[v1.SetIAMPolicyResponse], error) {
	return c.setIAMPolicy.CallUnary(ctx, req)
}

// GetACLPolicy calls ionscale.v1.IonscaleService.GetACLPolicy.
func (c *ionscaleServiceClient) GetACLPolicy(ctx context.Context, req *connect.Request[v1.GetACLPolicyRequest]) (*connect.Response[v1.GetACLPolicyResponse], error) {
	return c.getACLPolicy.CallUnary(ctx, req)
}

// SetACLPolicy calls ionscale.v1.IonscaleService.SetACLPolicy.
func (c *ionscaleServiceClient) SetACLPolicy(ctx context.Context, req *connect.Request[v1.SetACLPolicyRequest]) (*connect.Response[v1.SetACLPolicyResponse], error) {
	return c.setACLPolicy.CallUnary(ctx, req)
}

// GetAuthKey calls ionscale.v1.IonscaleService.GetAuthKey.
func (c *ionscaleServiceClient) GetAuthKey(ctx context.Context, req *connect.Request[v1.GetAuthKeyRequest]) (*connect.Response[v1.GetAuthKeyResponse], error) {
	return c.getAuthKey.CallUnary(ctx, req)
}

// CreateAuthKey calls ionscale.v1.IonscaleService.CreateAuthKey.
func (c *ionscaleServiceClient) CreateAuthKey(ctx context.Context, req *connect.Request[v1.CreateAuthKeyRequest]) (*connect.Response[v1.CreateAuthKeyResponse], error) {
	return c.createAuthKey.CallUnary(ctx, req)
}

// DeleteAuthKey calls ionscale.v1.IonscaleService.DeleteAuthKey.
func (c *ionscaleServiceClient) DeleteAuthKey(ctx context.Context, req *connect.Request[v1.DeleteAuthKeyRequest]) (*connect.Response[v1.DeleteAuthKeyResponse], error) {
	return c.deleteAuthKey.CallUnary(ctx, req)
}

// ListAuthKeys calls ionscale.v1.IonscaleService.ListAuthKeys.
func (c *ionscaleServiceClient) ListAuthKeys(ctx context.Context, req *connect.Request[v1.ListAuthKeysRequest]) (*connect.Response[v1.ListAuthKeysResponse], error) {
	return c.listAuthKeys.CallUnary(ctx, req)
}

// ListUsers calls ionscale.v1.IonscaleService.ListUsers.
func (c *ionscaleServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// DeleteUser calls ionscale.v1.IonscaleService.DeleteUser.
func (c *ionscaleServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// GetMachine calls ionscale.v1.IonscaleService.GetMachine.
func (c *ionscaleServiceClient) GetMachine(ctx context.Context, req *connect.Request[v1.GetMachineRequest]) (*connect.Response[v1.GetMachineResponse], error) {
	return c.getMachine.CallUnary(ctx, req)
}

// ListMachines calls ionscale.v1.IonscaleService.ListMachines.
func (c *ionscaleServiceClient) ListMachines(ctx context.Context, req *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error) {
	return c.listMachines.CallUnary(ctx, req)
}

// AuthorizeMachine calls ionscale.v1.IonscaleService.AuthorizeMachine.
func (c *ionscaleServiceClient) AuthorizeMachine(ctx context.Context, req *connect.Request[v1.AuthorizeMachineRequest]) (*connect.Response[v1.AuthorizeMachineResponse], error) {
	return c.authorizeMachine.CallUnary(ctx, req)
}

// RenameMachine calls ionscale.v1.IonscaleService.RenameMachine.
func (c *ionscaleServiceClient) RenameMachine(ctx context.Context, req *connect.Request[v1.RenameMachineRequest]) (*connect.Response[v1.RenameMachineResponse], error) {
	return c.renameMachine.CallUnary(ctx, req)
}

// ExpireMachine calls ionscale.v1.IonscaleService.ExpireMachine.
func (c *ionscaleServiceClient) ExpireMachine(ctx context.Context, req *connect.Request[v1.ExpireMachineRequest]) (*connect.Response[v1.ExpireMachineResponse], error) {
	return c.expireMachine.CallUnary(ctx, req)
}

// DeleteMachine calls ionscale.v1.IonscaleService.DeleteMachine.
func (c *ionscaleServiceClient) DeleteMachine(ctx context.Context, req *connect.Request[v1.DeleteMachineRequest]) (*connect.Response[v1.DeleteMachineResponse], error) {
	return c.deleteMachine.CallUnary(ctx, req)
}

// SetMachineKeyExpiry calls ionscale.v1.IonscaleService.SetMachineKeyExpiry.
func (c *ionscaleServiceClient) SetMachineKeyExpiry(ctx context.Context, req *connect.Request[v1.SetMachineKeyExpiryRequest]) (*connect.Response[v1.SetMachineKeyExpiryResponse], error) {
	return c.setMachineKeyExpiry.CallUnary(ctx, req)
}

// GetMachineRoutes calls ionscale.v1.IonscaleService.GetMachineRoutes.
func (c *ionscaleServiceClient) GetMachineRoutes(ctx context.Context, req *connect.Request[v1.GetMachineRoutesRequest]) (*connect.Response[v1.GetMachineRoutesResponse], error) {
	return c.getMachineRoutes.CallUnary(ctx, req)
}

// EnableMachineRoutes calls ionscale.v1.IonscaleService.EnableMachineRoutes.
func (c *ionscaleServiceClient) EnableMachineRoutes(ctx context.Context, req *connect.Request[v1.EnableMachineRoutesRequest]) (*connect.Response[v1.EnableMachineRoutesResponse], error) {
	return c.enableMachineRoutes.CallUnary(ctx, req)
}

// DisableMachineRoutes calls ionscale.v1.IonscaleService.DisableMachineRoutes.
func (c *ionscaleServiceClient) DisableMachineRoutes(ctx context.Context, req *connect.Request[v1.DisableMachineRoutesRequest]) (*connect.Response[v1.DisableMachineRoutesResponse], error) {
	return c.disableMachineRoutes.CallUnary(ctx, req)
}

// EnableExitNode calls ionscale.v1.IonscaleService.EnableExitNode.
func (c *ionscaleServiceClient) EnableExitNode(ctx context.Context, req *connect.Request[v1.EnableExitNodeRequest]) (*connect.Response[v1.EnableExitNodeResponse], error) {
	return c.enableExitNode.CallUnary(ctx, req)
}

// DisableExitNode calls ionscale.v1.IonscaleService.DisableExitNode.
func (c *ionscaleServiceClient) DisableExitNode(ctx context.Context, req *connect.Request[v1.DisableExitNodeRequest]) (*connect.Response[v1.DisableExitNodeResponse], error) {
	return c.disableExitNode.CallUnary(ctx, req)
}

// ToggleAutoNameMachine calls ionscale.v1.IonscaleService.ToggleAutoNameMachine.
func (c *ionscaleServiceClient) ToggleAutoNameMachine(ctx context.Context, req *connect.Request[v1.ToggleAutoNameMachineRequest]) (*connect.Response[v1.ToggleAutoNameMachineResponse], error) {
	return c.toggleAutoNameMachine.CallUnary(ctx, req)
}

// IonscaleServiceHandler is an implementation of the ionscale.v1.IonscaleService service.
type IonscaleServiceHandler interface {
	GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error)
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest], *connect.ServerStream[v1.AuthenticateResponse]) error
	GetDefaultDERPMap(context.Context, *connect.Request[v1.GetDefaultDERPMapRequest]) (*connect.Response[v1.GetDefaultDERPMapResponse], error)
	CreateTailnet(context.Context, *connect.Request[v1.CreateTailnetRequest]) (*connect.Response[v1.CreateTailnetResponse], error)
	UpdateTailnet(context.Context, *connect.Request[v1.UpdateTailnetRequest]) (*connect.Response[v1.UpdateTailnetResponse], error)
	GetTailnet(context.Context, *connect.Request[v1.GetTailnetRequest]) (*connect.Response[v1.GetTailnetResponse], error)
	ListTailnets(context.Context, *connect.Request[v1.ListTailnetsRequest]) (*connect.Response[v1.ListTailnetsResponse], error)
	DeleteTailnet(context.Context, *connect.Request[v1.DeleteTailnetRequest]) (*connect.Response[v1.DeleteTailnetResponse], error)
	GetDERPMap(context.Context, *connect.Request[v1.GetDERPMapRequest]) (*connect.Response[v1.GetDERPMapResponse], error)
	SetDERPMap(context.Context, *connect.Request[v1.SetDERPMapRequest]) (*connect.Response[v1.SetDERPMapResponse], error)
	ResetDERPMap(context.Context, *connect.Request[v1.ResetDERPMapRequest]) (*connect.Response[v1.ResetDERPMapResponse], error)
	EnableFileSharing(context.Context, *connect.Request[v1.EnableFileSharingRequest]) (*connect.Response[v1.EnableFileSharingResponse], error)
	DisableFileSharing(context.Context, *connect.Request[v1.DisableFileSharingRequest]) (*connect.Response[v1.DisableFileSharingResponse], error)
	EnableServiceCollection(context.Context, *connect.Request[v1.EnableServiceCollectionRequest]) (*connect.Response[v1.EnableServiceCollectionResponse], error)
	DisableServiceCollection(context.Context, *connect.Request[v1.DisableServiceCollectionRequest]) (*connect.Response[v1.DisableServiceCollectionResponse], error)
	EnableSSH(context.Context, *connect.Request[v1.EnableSSHRequest]) (*connect.Response[v1.EnableSSHResponse], error)
	DisableSSH(context.Context, *connect.Request[v1.DisableSSHRequest]) (*connect.Response[v1.DisableSSHResponse], error)
	EnableMachineAuthorization(context.Context, *connect.Request[v1.EnableMachineAuthorizationRequest]) (*connect.Response[v1.EnableMachineAuthorizationResponse], error)
	DisableMachineAuthorization(context.Context, *connect.Request[v1.DisableMachineAuthorizationRequest]) (*connect.Response[v1.DisableMachineAuthorizationResponse], error)
	GetDNSConfig(context.Context, *connect.Request[v1.GetDNSConfigRequest]) (*connect.Response[v1.GetDNSConfigResponse], error)
	SetDNSConfig(context.Context, *connect.Request[v1.SetDNSConfigRequest]) (*connect.Response[v1.SetDNSConfigResponse], error)
	GetIAMPolicy(context.Context, *connect.Request[v1.GetIAMPolicyRequest]) (*connect.Response[v1.GetIAMPolicyResponse], error)
	SetIAMPolicy(context.Context, *connect.Request[v1.SetIAMPolicyRequest]) (*connect.Response[v1.SetIAMPolicyResponse], error)
	GetACLPolicy(context.Context, *connect.Request[v1.GetACLPolicyRequest]) (*connect.Response[v1.GetACLPolicyResponse], error)
	SetACLPolicy(context.Context, *connect.Request[v1.SetACLPolicyRequest]) (*connect.Response[v1.SetACLPolicyResponse], error)
	GetAuthKey(context.Context, *connect.Request[v1.GetAuthKeyRequest]) (*connect.Response[v1.GetAuthKeyResponse], error)
	CreateAuthKey(context.Context, *connect.Request[v1.CreateAuthKeyRequest]) (*connect.Response[v1.CreateAuthKeyResponse], error)
	DeleteAuthKey(context.Context, *connect.Request[v1.DeleteAuthKeyRequest]) (*connect.Response[v1.DeleteAuthKeyResponse], error)
	ListAuthKeys(context.Context, *connect.Request[v1.ListAuthKeysRequest]) (*connect.Response[v1.ListAuthKeysResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	GetMachine(context.Context, *connect.Request[v1.GetMachineRequest]) (*connect.Response[v1.GetMachineResponse], error)
	ListMachines(context.Context, *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error)
	AuthorizeMachine(context.Context, *connect.Request[v1.AuthorizeMachineRequest]) (*connect.Response[v1.AuthorizeMachineResponse], error)
	RenameMachine(context.Context, *connect.Request[v1.RenameMachineRequest]) (*connect.Response[v1.RenameMachineResponse], error)
	ExpireMachine(context.Context, *connect.Request[v1.ExpireMachineRequest]) (*connect.Response[v1.ExpireMachineResponse], error)
	DeleteMachine(context.Context, *connect.Request[v1.DeleteMachineRequest]) (*connect.Response[v1.DeleteMachineResponse], error)
	SetMachineKeyExpiry(context.Context, *connect.Request[v1.SetMachineKeyExpiryRequest]) (*connect.Response[v1.SetMachineKeyExpiryResponse], error)
	GetMachineRoutes(context.Context, *connect.Request[v1.GetMachineRoutesRequest]) (*connect.Response[v1.GetMachineRoutesResponse], error)
	EnableMachineRoutes(context.Context, *connect.Request[v1.EnableMachineRoutesRequest]) (*connect.Response[v1.EnableMachineRoutesResponse], error)
	DisableMachineRoutes(context.Context, *connect.Request[v1.DisableMachineRoutesRequest]) (*connect.Response[v1.DisableMachineRoutesResponse], error)
	EnableExitNode(context.Context, *connect.Request[v1.EnableExitNodeRequest]) (*connect.Response[v1.EnableExitNodeResponse], error)
	DisableExitNode(context.Context, *connect.Request[v1.DisableExitNodeRequest]) (*connect.Response[v1.DisableExitNodeResponse], error)
	ToggleAutoNameMachine(context.Context, *connect.Request[v1.ToggleAutoNameMachineRequest]) (*connect.Response[v1.ToggleAutoNameMachineResponse], error)
}

// NewIonscaleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIonscaleServiceHandler(svc IonscaleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ionscaleServiceGetVersionHandler := connect.NewUnaryHandler(
		IonscaleServiceGetVersionProcedure,
		svc.GetVersion,
		connect.WithSchema(ionscaleServiceGetVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceAuthenticateHandler := connect.NewServerStreamHandler(
		IonscaleServiceAuthenticateProcedure,
		svc.Authenticate,
		connect.WithSchema(ionscaleServiceAuthenticateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceGetDefaultDERPMapHandler := connect.NewUnaryHandler(
		IonscaleServiceGetDefaultDERPMapProcedure,
		svc.GetDefaultDERPMap,
		connect.WithSchema(ionscaleServiceGetDefaultDERPMapMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceCreateTailnetHandler := connect.NewUnaryHandler(
		IonscaleServiceCreateTailnetProcedure,
		svc.CreateTailnet,
		connect.WithSchema(ionscaleServiceCreateTailnetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceUpdateTailnetHandler := connect.NewUnaryHandler(
		IonscaleServiceUpdateTailnetProcedure,
		svc.UpdateTailnet,
		connect.WithSchema(ionscaleServiceUpdateTailnetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceGetTailnetHandler := connect.NewUnaryHandler(
		IonscaleServiceGetTailnetProcedure,
		svc.GetTailnet,
		connect.WithSchema(ionscaleServiceGetTailnetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceListTailnetsHandler := connect.NewUnaryHandler(
		IonscaleServiceListTailnetsProcedure,
		svc.ListTailnets,
		connect.WithSchema(ionscaleServiceListTailnetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceDeleteTailnetHandler := connect.NewUnaryHandler(
		IonscaleServiceDeleteTailnetProcedure,
		svc.DeleteTailnet,
		connect.WithSchema(ionscaleServiceDeleteTailnetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceGetDERPMapHandler := connect.NewUnaryHandler(
		IonscaleServiceGetDERPMapProcedure,
		svc.GetDERPMap,
		connect.WithSchema(ionscaleServiceGetDERPMapMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceSetDERPMapHandler := connect.NewUnaryHandler(
		IonscaleServiceSetDERPMapProcedure,
		svc.SetDERPMap,
		connect.WithSchema(ionscaleServiceSetDERPMapMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceResetDERPMapHandler := connect.NewUnaryHandler(
		IonscaleServiceResetDERPMapProcedure,
		svc.ResetDERPMap,
		connect.WithSchema(ionscaleServiceResetDERPMapMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceEnableFileSharingHandler := connect.NewUnaryHandler(
		IonscaleServiceEnableFileSharingProcedure,
		svc.EnableFileSharing,
		connect.WithSchema(ionscaleServiceEnableFileSharingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceDisableFileSharingHandler := connect.NewUnaryHandler(
		IonscaleServiceDisableFileSharingProcedure,
		svc.DisableFileSharing,
		connect.WithSchema(ionscaleServiceDisableFileSharingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceEnableServiceCollectionHandler := connect.NewUnaryHandler(
		IonscaleServiceEnableServiceCollectionProcedure,
		svc.EnableServiceCollection,
		connect.WithSchema(ionscaleServiceEnableServiceCollectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceDisableServiceCollectionHandler := connect.NewUnaryHandler(
		IonscaleServiceDisableServiceCollectionProcedure,
		svc.DisableServiceCollection,
		connect.WithSchema(ionscaleServiceDisableServiceCollectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceEnableSSHHandler := connect.NewUnaryHandler(
		IonscaleServiceEnableSSHProcedure,
		svc.EnableSSH,
		connect.WithSchema(ionscaleServiceEnableSSHMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceDisableSSHHandler := connect.NewUnaryHandler(
		IonscaleServiceDisableSSHProcedure,
		svc.DisableSSH,
		connect.WithSchema(ionscaleServiceDisableSSHMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceEnableMachineAuthorizationHandler := connect.NewUnaryHandler(
		IonscaleServiceEnableMachineAuthorizationProcedure,
		svc.EnableMachineAuthorization,
		connect.WithSchema(ionscaleServiceEnableMachineAuthorizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceDisableMachineAuthorizationHandler := connect.NewUnaryHandler(
		IonscaleServiceDisableMachineAuthorizationProcedure,
		svc.DisableMachineAuthorization,
		connect.WithSchema(ionscaleServiceDisableMachineAuthorizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceGetDNSConfigHandler := connect.NewUnaryHandler(
		IonscaleServiceGetDNSConfigProcedure,
		svc.GetDNSConfig,
		connect.WithSchema(ionscaleServiceGetDNSConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceSetDNSConfigHandler := connect.NewUnaryHandler(
		IonscaleServiceSetDNSConfigProcedure,
		svc.SetDNSConfig,
		connect.WithSchema(ionscaleServiceSetDNSConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceGetIAMPolicyHandler := connect.NewUnaryHandler(
		IonscaleServiceGetIAMPolicyProcedure,
		svc.GetIAMPolicy,
		connect.WithSchema(ionscaleServiceGetIAMPolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceSetIAMPolicyHandler := connect.NewUnaryHandler(
		IonscaleServiceSetIAMPolicyProcedure,
		svc.SetIAMPolicy,
		connect.WithSchema(ionscaleServiceSetIAMPolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceGetACLPolicyHandler := connect.NewUnaryHandler(
		IonscaleServiceGetACLPolicyProcedure,
		svc.GetACLPolicy,
		connect.WithSchema(ionscaleServiceGetACLPolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceSetACLPolicyHandler := connect.NewUnaryHandler(
		IonscaleServiceSetACLPolicyProcedure,
		svc.SetACLPolicy,
		connect.WithSchema(ionscaleServiceSetACLPolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceGetAuthKeyHandler := connect.NewUnaryHandler(
		IonscaleServiceGetAuthKeyProcedure,
		svc.GetAuthKey,
		connect.WithSchema(ionscaleServiceGetAuthKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceCreateAuthKeyHandler := connect.NewUnaryHandler(
		IonscaleServiceCreateAuthKeyProcedure,
		svc.CreateAuthKey,
		connect.WithSchema(ionscaleServiceCreateAuthKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceDeleteAuthKeyHandler := connect.NewUnaryHandler(
		IonscaleServiceDeleteAuthKeyProcedure,
		svc.DeleteAuthKey,
		connect.WithSchema(ionscaleServiceDeleteAuthKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceListAuthKeysHandler := connect.NewUnaryHandler(
		IonscaleServiceListAuthKeysProcedure,
		svc.ListAuthKeys,
		connect.WithSchema(ionscaleServiceListAuthKeysMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceListUsersHandler := connect.NewUnaryHandler(
		IonscaleServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(ionscaleServiceListUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceDeleteUserHandler := connect.NewUnaryHandler(
		IonscaleServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(ionscaleServiceDeleteUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceGetMachineHandler := connect.NewUnaryHandler(
		IonscaleServiceGetMachineProcedure,
		svc.GetMachine,
		connect.WithSchema(ionscaleServiceGetMachineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceListMachinesHandler := connect.NewUnaryHandler(
		IonscaleServiceListMachinesProcedure,
		svc.ListMachines,
		connect.WithSchema(ionscaleServiceListMachinesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceAuthorizeMachineHandler := connect.NewUnaryHandler(
		IonscaleServiceAuthorizeMachineProcedure,
		svc.AuthorizeMachine,
		connect.WithSchema(ionscaleServiceAuthorizeMachineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceRenameMachineHandler := connect.NewUnaryHandler(
		IonscaleServiceRenameMachineProcedure,
		svc.RenameMachine,
		connect.WithSchema(ionscaleServiceRenameMachineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceExpireMachineHandler := connect.NewUnaryHandler(
		IonscaleServiceExpireMachineProcedure,
		svc.ExpireMachine,
		connect.WithSchema(ionscaleServiceExpireMachineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceDeleteMachineHandler := connect.NewUnaryHandler(
		IonscaleServiceDeleteMachineProcedure,
		svc.DeleteMachine,
		connect.WithSchema(ionscaleServiceDeleteMachineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceSetMachineKeyExpiryHandler := connect.NewUnaryHandler(
		IonscaleServiceSetMachineKeyExpiryProcedure,
		svc.SetMachineKeyExpiry,
		connect.WithSchema(ionscaleServiceSetMachineKeyExpiryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceGetMachineRoutesHandler := connect.NewUnaryHandler(
		IonscaleServiceGetMachineRoutesProcedure,
		svc.GetMachineRoutes,
		connect.WithSchema(ionscaleServiceGetMachineRoutesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceEnableMachineRoutesHandler := connect.NewUnaryHandler(
		IonscaleServiceEnableMachineRoutesProcedure,
		svc.EnableMachineRoutes,
		connect.WithSchema(ionscaleServiceEnableMachineRoutesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceDisableMachineRoutesHandler := connect.NewUnaryHandler(
		IonscaleServiceDisableMachineRoutesProcedure,
		svc.DisableMachineRoutes,
		connect.WithSchema(ionscaleServiceDisableMachineRoutesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceEnableExitNodeHandler := connect.NewUnaryHandler(
		IonscaleServiceEnableExitNodeProcedure,
		svc.EnableExitNode,
		connect.WithSchema(ionscaleServiceEnableExitNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceDisableExitNodeHandler := connect.NewUnaryHandler(
		IonscaleServiceDisableExitNodeProcedure,
		svc.DisableExitNode,
		connect.WithSchema(ionscaleServiceDisableExitNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ionscaleServiceToggleAutoNameMachineHandler := connect.NewUnaryHandler(
		IonscaleServiceToggleAutoNameMachineProcedure,
		svc.ToggleAutoNameMachine,
		connect.WithSchema(ionscaleServiceToggleAutoNameMachineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ionscale.v1.IonscaleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IonscaleServiceGetVersionProcedure:
			ionscaleServiceGetVersionHandler.ServeHTTP(w, r)
		case IonscaleServiceAuthenticateProcedure:
			ionscaleServiceAuthenticateHandler.ServeHTTP(w, r)
		case IonscaleServiceGetDefaultDERPMapProcedure:
			ionscaleServiceGetDefaultDERPMapHandler.ServeHTTP(w, r)
		case IonscaleServiceCreateTailnetProcedure:
			ionscaleServiceCreateTailnetHandler.ServeHTTP(w, r)
		case IonscaleServiceUpdateTailnetProcedure:
			ionscaleServiceUpdateTailnetHandler.ServeHTTP(w, r)
		case IonscaleServiceGetTailnetProcedure:
			ionscaleServiceGetTailnetHandler.ServeHTTP(w, r)
		case IonscaleServiceListTailnetsProcedure:
			ionscaleServiceListTailnetsHandler.ServeHTTP(w, r)
		case IonscaleServiceDeleteTailnetProcedure:
			ionscaleServiceDeleteTailnetHandler.ServeHTTP(w, r)
		case IonscaleServiceGetDERPMapProcedure:
			ionscaleServiceGetDERPMapHandler.ServeHTTP(w, r)
		case IonscaleServiceSetDERPMapProcedure:
			ionscaleServiceSetDERPMapHandler.ServeHTTP(w, r)
		case IonscaleServiceResetDERPMapProcedure:
			ionscaleServiceResetDERPMapHandler.ServeHTTP(w, r)
		case IonscaleServiceEnableFileSharingProcedure:
			ionscaleServiceEnableFileSharingHandler.ServeHTTP(w, r)
		case IonscaleServiceDisableFileSharingProcedure:
			ionscaleServiceDisableFileSharingHandler.ServeHTTP(w, r)
		case IonscaleServiceEnableServiceCollectionProcedure:
			ionscaleServiceEnableServiceCollectionHandler.ServeHTTP(w, r)
		case IonscaleServiceDisableServiceCollectionProcedure:
			ionscaleServiceDisableServiceCollectionHandler.ServeHTTP(w, r)
		case IonscaleServiceEnableSSHProcedure:
			ionscaleServiceEnableSSHHandler.ServeHTTP(w, r)
		case IonscaleServiceDisableSSHProcedure:
			ionscaleServiceDisableSSHHandler.ServeHTTP(w, r)
		case IonscaleServiceEnableMachineAuthorizationProcedure:
			ionscaleServiceEnableMachineAuthorizationHandler.ServeHTTP(w, r)
		case IonscaleServiceDisableMachineAuthorizationProcedure:
			ionscaleServiceDisableMachineAuthorizationHandler.ServeHTTP(w, r)
		case IonscaleServiceGetDNSConfigProcedure:
			ionscaleServiceGetDNSConfigHandler.ServeHTTP(w, r)
		case IonscaleServiceSetDNSConfigProcedure:
			ionscaleServiceSetDNSConfigHandler.ServeHTTP(w, r)
		case IonscaleServiceGetIAMPolicyProcedure:
			ionscaleServiceGetIAMPolicyHandler.ServeHTTP(w, r)
		case IonscaleServiceSetIAMPolicyProcedure:
			ionscaleServiceSetIAMPolicyHandler.ServeHTTP(w, r)
		case IonscaleServiceGetACLPolicyProcedure:
			ionscaleServiceGetACLPolicyHandler.ServeHTTP(w, r)
		case IonscaleServiceSetACLPolicyProcedure:
			ionscaleServiceSetACLPolicyHandler.ServeHTTP(w, r)
		case IonscaleServiceGetAuthKeyProcedure:
			ionscaleServiceGetAuthKeyHandler.ServeHTTP(w, r)
		case IonscaleServiceCreateAuthKeyProcedure:
			ionscaleServiceCreateAuthKeyHandler.ServeHTTP(w, r)
		case IonscaleServiceDeleteAuthKeyProcedure:
			ionscaleServiceDeleteAuthKeyHandler.ServeHTTP(w, r)
		case IonscaleServiceListAuthKeysProcedure:
			ionscaleServiceListAuthKeysHandler.ServeHTTP(w, r)
		case IonscaleServiceListUsersProcedure:
			ionscaleServiceListUsersHandler.ServeHTTP(w, r)
		case IonscaleServiceDeleteUserProcedure:
			ionscaleServiceDeleteUserHandler.ServeHTTP(w, r)
		case IonscaleServiceGetMachineProcedure:
			ionscaleServiceGetMachineHandler.ServeHTTP(w, r)
		case IonscaleServiceListMachinesProcedure:
			ionscaleServiceListMachinesHandler.ServeHTTP(w, r)
		case IonscaleServiceAuthorizeMachineProcedure:
			ionscaleServiceAuthorizeMachineHandler.ServeHTTP(w, r)
		case IonscaleServiceRenameMachineProcedure:
			ionscaleServiceRenameMachineHandler.ServeHTTP(w, r)
		case IonscaleServiceExpireMachineProcedure:
			ionscaleServiceExpireMachineHandler.ServeHTTP(w, r)
		case IonscaleServiceDeleteMachineProcedure:
			ionscaleServiceDeleteMachineHandler.ServeHTTP(w, r)
		case IonscaleServiceSetMachineKeyExpiryProcedure:
			ionscaleServiceSetMachineKeyExpiryHandler.ServeHTTP(w, r)
		case IonscaleServiceGetMachineRoutesProcedure:
			ionscaleServiceGetMachineRoutesHandler.ServeHTTP(w, r)
		case IonscaleServiceEnableMachineRoutesProcedure:
			ionscaleServiceEnableMachineRoutesHandler.ServeHTTP(w, r)
		case IonscaleServiceDisableMachineRoutesProcedure:
			ionscaleServiceDisableMachineRoutesHandler.ServeHTTP(w, r)
		case IonscaleServiceEnableExitNodeProcedure:
			ionscaleServiceEnableExitNodeHandler.ServeHTTP(w, r)
		case IonscaleServiceDisableExitNodeProcedure:
			ionscaleServiceDisableExitNodeHandler.ServeHTTP(w, r)
		case IonscaleServiceToggleAutoNameMachineProcedure:
			ionscaleServiceToggleAutoNameMachineHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIonscaleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIonscaleServiceHandler struct{}

func (UnimplementedIonscaleServiceHandler) GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetVersion is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest], *connect.ServerStream[v1.AuthenticateResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.Authenticate is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetDefaultDERPMap(context.Context, *connect.Request[v1.GetDefaultDERPMapRequest]) (*connect.Response[v1.GetDefaultDERPMapResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetDefaultDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) CreateTailnet(context.Context, *connect.Request[v1.CreateTailnetRequest]) (*connect.Response[v1.CreateTailnetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.CreateTailnet is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) UpdateTailnet(context.Context, *connect.Request[v1.UpdateTailnetRequest]) (*connect.Response[v1.UpdateTailnetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.UpdateTailnet is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetTailnet(context.Context, *connect.Request[v1.GetTailnetRequest]) (*connect.Response[v1.GetTailnetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetTailnet is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListTailnets(context.Context, *connect.Request[v1.ListTailnetsRequest]) (*connect.Response[v1.ListTailnetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListTailnets is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteTailnet(context.Context, *connect.Request[v1.DeleteTailnetRequest]) (*connect.Response[v1.DeleteTailnetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteTailnet is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetDERPMap(context.Context, *connect.Request[v1.GetDERPMapRequest]) (*connect.Response[v1.GetDERPMapResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetDERPMap(context.Context, *connect.Request[v1.SetDERPMapRequest]) (*connect.Response[v1.SetDERPMapResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ResetDERPMap(context.Context, *connect.Request[v1.ResetDERPMapRequest]) (*connect.Response[v1.ResetDERPMapResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ResetDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableFileSharing(context.Context, *connect.Request[v1.EnableFileSharingRequest]) (*connect.Response[v1.EnableFileSharingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableFileSharing is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableFileSharing(context.Context, *connect.Request[v1.DisableFileSharingRequest]) (*connect.Response[v1.DisableFileSharingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableFileSharing is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableServiceCollection(context.Context, *connect.Request[v1.EnableServiceCollectionRequest]) (*connect.Response[v1.EnableServiceCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableServiceCollection is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableServiceCollection(context.Context, *connect.Request[v1.DisableServiceCollectionRequest]) (*connect.Response[v1.DisableServiceCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableServiceCollection is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableSSH(context.Context, *connect.Request[v1.EnableSSHRequest]) (*connect.Response[v1.EnableSSHResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableSSH is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableSSH(context.Context, *connect.Request[v1.DisableSSHRequest]) (*connect.Response[v1.DisableSSHResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableSSH is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableMachineAuthorization(context.Context, *connect.Request[v1.EnableMachineAuthorizationRequest]) (*connect.Response[v1.EnableMachineAuthorizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableMachineAuthorization is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableMachineAuthorization(context.Context, *connect.Request[v1.DisableMachineAuthorizationRequest]) (*connect.Response[v1.DisableMachineAuthorizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableMachineAuthorization is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetDNSConfig(context.Context, *connect.Request[v1.GetDNSConfigRequest]) (*connect.Response[v1.GetDNSConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetDNSConfig is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetDNSConfig(context.Context, *connect.Request[v1.SetDNSConfigRequest]) (*connect.Response[v1.SetDNSConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetDNSConfig is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetIAMPolicy(context.Context, *connect.Request[v1.GetIAMPolicyRequest]) (*connect.Response[v1.GetIAMPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetIAMPolicy is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetIAMPolicy(context.Context, *connect.Request[v1.SetIAMPolicyRequest]) (*connect.Response[v1.SetIAMPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetIAMPolicy is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetACLPolicy(context.Context, *connect.Request[v1.GetACLPolicyRequest]) (*connect.Response[v1.GetACLPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetACLPolicy is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetACLPolicy(context.Context, *connect.Request[v1.SetACLPolicyRequest]) (*connect.Response[v1.SetACLPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetACLPolicy is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetAuthKey(context.Context, *connect.Request[v1.GetAuthKeyRequest]) (*connect.Response[v1.GetAuthKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetAuthKey is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) CreateAuthKey(context.Context, *connect.Request[v1.CreateAuthKeyRequest]) (*connect.Response[v1.CreateAuthKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.CreateAuthKey is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteAuthKey(context.Context, *connect.Request[v1.DeleteAuthKeyRequest]) (*connect.Response[v1.DeleteAuthKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteAuthKey is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListAuthKeys(context.Context, *connect.Request[v1.ListAuthKeysRequest]) (*connect.Response[v1.ListAuthKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListAuthKeys is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListUsers is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteUser is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetMachine(context.Context, *connect.Request[v1.GetMachineRequest]) (*connect.Response[v1.GetMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetMachine is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListMachines(context.Context, *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListMachines is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) AuthorizeMachine(context.Context, *connect.Request[v1.AuthorizeMachineRequest]) (*connect.Response[v1.AuthorizeMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.AuthorizeMachine is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) RenameMachine(context.Context, *connect.Request[v1.RenameMachineRequest]) (*connect.Response[v1.RenameMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.RenameMachine is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ExpireMachine(context.Context, *connect.Request[v1.ExpireMachineRequest]) (*connect.Response[v1.ExpireMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ExpireMachine is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteMachine(context.Context, *connect.Request[v1.DeleteMachineRequest]) (*connect.Response[v1.DeleteMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteMachine is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetMachineKeyExpiry(context.Context, *connect.Request[v1.SetMachineKeyExpiryRequest]) (*connect.Response[v1.SetMachineKeyExpiryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetMachineKeyExpiry is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetMachineRoutes(context.Context, *connect.Request[v1.GetMachineRoutesRequest]) (*connect.Response[v1.GetMachineRoutesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetMachineRoutes is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableMachineRoutes(context.Context, *connect.Request[v1.EnableMachineRoutesRequest]) (*connect.Response[v1.EnableMachineRoutesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableMachineRoutes is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableMachineRoutes(context.Context, *connect.Request[v1.DisableMachineRoutesRequest]) (*connect.Response[v1.DisableMachineRoutesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableMachineRoutes is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableExitNode(context.Context, *connect.Request[v1.EnableExitNodeRequest]) (*connect.Response[v1.EnableExitNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableExitNode is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableExitNode(context.Context, *connect.Request[v1.DisableExitNodeRequest]) (*connect.Response[v1.DisableExitNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableExitNode is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ToggleAutoNameMachine(context.Context, *connect.Request[v1.ToggleAutoNameMachineRequest]) (*connect.Response[v1.ToggleAutoNameMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ToggleAutoNameMachine is not implemented"))
}
